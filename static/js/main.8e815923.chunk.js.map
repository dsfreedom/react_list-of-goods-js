{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_NAME","SORT_FIELD_LENGTH","isResetVisible","App","useState","sortField","setSortField","isReversed","setReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,OAClBC,EAAoB,SACtBC,GAAiB,EA8Bd,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA/BR,SAA0BC,EAA1B,GAA6D,IAA1BL,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,WACtCI,EAAa,YAAOD,GAwB1B,OAtBIL,IACFH,GAAiB,EAEjBS,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EACH,OAAOa,EAAME,cAAcD,GAE7B,KAAKb,EACH,OAAOY,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,OAKXT,IACFL,GAAiB,EACjBS,EAAcM,WAGTN,EAMcO,CACnBnB,EACA,CAAEM,YAAWE,eAmBf,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMf,EAAaN,IAC5BmB,UAAS,yBAAoBG,IAAG,CAAE,WAAYjB,IAAcL,KAH9D,iCAQA,wBACEoB,KAAK,SACLC,QAAS,kBAAMf,EAAaL,IAC5BkB,UAAS,4BAAuBG,IAAG,CAAE,WAAYjB,IAAcJ,KAHjE,4BAQA,wBACEmB,KAAK,SACLC,QAAS,kBApCXd,GACFL,GAAiB,EAEVM,GAAY,IAGdA,GAAY,IA+BbW,UAAS,4BAAuBG,IAAG,CAAE,YAAaf,KAHpD,qBAQCL,GAEC,wBACEkB,KAAK,SACLC,QArCV,WACEf,EAAa,IACbE,GAAY,GACZN,GAAiB,GAmCTiB,UAAU,4BAHZ,sBAUJ,6BACGV,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YChHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8e815923.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\nlet isResetVisible = false;\n\nfunction getPreparedGoods(goods, { sortField, isReversed }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    isResetVisible = true;\n\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_NAME:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    isResetVisible = true;\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, isReversed },\n  );\n\n  function setReverseButtonAction(reverse) {\n    if (isReversed) {\n      isResetVisible = false;\n\n      return setReversed(false);\n    }\n\n    return setReversed(true);\n  }\n\n  function resetSorting() {\n    setSortField('');\n    setReversed(false);\n    isResetVisible = false;\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n          className={`button is-info ${cn({ 'is-light': sortField !== SORT_FIELD_NAME })}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          className={`button is-success ${cn({ 'is-light': sortField !== SORT_FIELD_LENGTH })}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setReverseButtonAction(isReversed)}\n          className={`button is-warning ${cn({ 'is-light': !isReversed })}`}\n        >\n          Reverse\n        </button>\n\n        {isResetVisible\n        && (\n          <button\n            type=\"button\"\n            onClick={resetSorting}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}