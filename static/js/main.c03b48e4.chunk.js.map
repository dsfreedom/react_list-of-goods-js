{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_NAME","SORT_FIELD_LENGTH","SORT_DIRECTION_REVERSED","CHANGED_DIRECTION","CHANGED_SORTING","App","sorting","useState","sortField","setSortField","direction","setDirection","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,OAClBC,EAAoB,SACpBC,EAA0B,WAC5BC,GAAoB,EACpBC,GAAkB,EA8Bf,IAAMC,EAAM,WACjB,IAyB4BC,EAzB5B,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EA/BR,SAA0BC,EAA1B,GAA4D,IAAzBL,EAAwB,EAAxBA,UAAWE,EAAa,EAAbA,UACtCI,EAAa,YAAOD,GAwB1B,OAtBIL,IACFJ,GAAkB,EAElBU,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKR,EACH,OAAOgB,EAAME,cAAcD,GAE7B,KAAKhB,EACH,OAAOe,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,OAKXT,IAAcR,IAChBE,GAAkB,EAClBU,EAAcM,WAGTN,EAMcO,CACnBtB,EACA,CAAES,YAAWE,cA+Bf,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMf,EAAaT,IAC5BsB,UAAS,yBAAoBG,IAAG,CAAE,WAAYjB,IAAcR,KAH9D,iCAQA,wBACEuB,KAAK,SACLC,QAAS,kBAAMf,EAAaR,IAC5BqB,UAAS,4BAAuBG,IAAG,CAAE,WAAYjB,IAAcP,KAHjE,4BAQA,wBACEsB,KAAK,SACLC,QAAS,kBAA6BrB,GA/C1CA,GAAoB,EAEbQ,EAAa,MAGtBR,GAAoB,EAEbQ,EAAaT,KAyCdoB,UAAS,4BAAuBG,IAAG,CAAE,WAAYf,IAAcR,KAHjE,sBA7BsBI,EAqCFF,IApCpBE,IACFF,GAAkB,GAEX,IAmCH,wBACEmB,KAAK,SACLC,QAAS,kBA9CjBf,EAAa,IACbE,EAAa,SACbR,GAAoB,IA6CZmB,UAAU,4BAHZ,uBAUJ,6BACGV,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC9HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c03b48e4.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\nconst SORT_DIRECTION_REVERSED = 'reversed';\nlet CHANGED_DIRECTION = false;\nlet CHANGED_SORTING = false;\n\nfunction getPreparedGoods(goods, { sortField, direction }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    CHANGED_SORTING = true;\n\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_NAME:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (direction === SORT_DIRECTION_REVERSED) {\n    CHANGED_SORTING = true;\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [direction, setDirection] = useState('');\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, direction },\n  );\n\n  function setReverseButtonAction(directionChanges) {\n    if (directionChanges) {\n      CHANGED_DIRECTION = false;\n\n      return setDirection('');\n    }\n\n    CHANGED_DIRECTION = true;\n\n    return setDirection(SORT_DIRECTION_REVERSED);\n  }\n\n  function resetSorting() {\n    setSortField('');\n    setDirection('');\n    CHANGED_DIRECTION = false;\n  }\n\n  function displayResetButton(sorting) {\n    if (sorting) {\n      CHANGED_SORTING = false;\n\n      return true;\n    }\n\n    return false;\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n          className={`button is-info ${cn({ 'is-light': sortField !== SORT_FIELD_NAME })}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          className={`button is-success ${cn({ 'is-light': sortField !== SORT_FIELD_LENGTH })}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setReverseButtonAction(CHANGED_DIRECTION)}\n          className={`button is-warning ${cn({ 'is-light': direction !== SORT_DIRECTION_REVERSED })}`}\n        >\n          Reverse\n        </button>\n\n        {displayResetButton(CHANGED_SORTING)\n        && (\n          <button\n            type=\"button\"\n            onClick={() => resetSorting()}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}